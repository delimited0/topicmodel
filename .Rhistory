opinion$kicker[7323]
opinion$kicker
opinion$kicker[1000:2000]
opinion[1461,]
opinion[1462,]
opinion[1460,]
opinion$kicker[2000:3000]
opinion$kicker[3000:4000]
opinion$kicker[4000:5000]
opinion$kicker[5000:6000]
opinion.docs <- transformCorpus(Corpus(VectorSource(opinion$article[!cartoon_idx])))
length(opinion.docs)
opinion.dtm <- DocumentTermMatrix(opinion.docs)
dim(opinion.dtm)
opinion.dtm.count <- rowSums(as.matrix(opinion.dtm))
sum(opinion.dtm.count==0)
opinion.dtm.zero.idx <- which(opinion.dtm.count == 0)
opinion.docs <- Corpus(VectorSource(opinion$article[-opinion.dtm.zero.idx]))
opinion.dtm <- DocumentTermMatrix(transformCorpus(opinion.docs))
period_identity <- function(dates, level) {
# periodIdentity
# Creates vector of period identities, such that documents with same
# level are assigned to the same period
# Requires lubridate
# dates - vector, dates
# level - function, that gets time level from a date. eg, "month"
dates <- dates[order(dates)]
identity <- rep(1, length(dates))
currIdentity <- 1
prevLevel <- level(dates[1])
for (i in 2:length(dates)) {
currLevel <- level(dates[i])
if (currLevel != prevLevel)
currIdentity <- currIdentity + 1
identity[i] <- currIdentity
prevLevel <- currLevel
}
return(identity)
}
period_identity(opinion, "monht")
period_identity(opinion, "month")
period_identity(opinion$date, "month")
level
factor
level
base::level
foo = period_identity(opinion$date, month)
foo
dir()
ls9)
ls()
opinion <- readArticles("/Users/patrickding/Documents/Projects/TopicModel/opinion.csv")
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
rm(opinion.docs)
rm(opinion.dtm)
opinion_dtm <- DocumentTermMatrix(opinion_docs)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
opinion_docs <- Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx]))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
dim(opinion_dtm)
opinion_docs <- Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx,]))
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx])))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
dim(opinion_dtm)
period
periods
document
doc
opinion_dtm[1,]
typeof(opinion_dtm[1,])
is.object(opinion_dtm[1,])
isS4(opinion_dtm[1,])
class(opinion_dtm[1,])
class(opinion_dtm[1,]) == "DocumentTermMatrix"
if(class(opinion_dtm[1,]) == "DocumentTermMatrix")
print(hi)
library(topicmodels)
?dtm2ldaformat
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
opinion_dat = dtm2ldaformat(opinion_dtm)
dim(opinion_dat[1])
dim(opinion_dat[[1])
dim(opinion_dat[[1]])
dim(opinion_dat[[2]])
opinion_dat[[1]]
length(opinion_dat[[1]])
opinion_dat[[1]][1]
library(lda)
?lexicalize
opinion_dat$vocav
opinion_dat$vocab
opinion_dat$vocab[1]
opinion_dat$vocab[2]
opinion_dat$vocab[3]
opinion_dat$vocab[4]
opinion_dat$vocab[5]
opinion_dat$vocab[6]
opinion_dat$vocab[7]
opinion_dat$vocab[10]
opinion_dat$vocab[100]
opinion_dat$vocab[120]
opinion_dat$vocab[130]
opinion_dat$documents[[2]][1]
opinion_dat$documents[[1]]
opinion_dat$documents[[2]]
class(opinion_dat)
class("DocumentTermMatrix")
typeof(opinion_dat$documents[[1]])
class(opinion_dat$documents[[1]])
class(opinion_dat$documents)
?Map
length(opinion_dat$vocab)
dim(opinion_dtm)
union(opinion_dat$documents[1,])
union(Map(function(x){x[1,]}, opinion_dat$documents))
union(Map(function(x){x}, opinion_dat$documents))
?"union"
opinion_dat$documents[[1]][1,]
opinion_dat$documents[[1]][1000,]
opinion_dat$documents[[1000]][1,]
opinion_dat$documents[[6000]][1,]
union
Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents))
length(Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents)))
class(opinion_dat)
docs$documents
corpus
length(opinion_dat$documents)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents)
)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
Map(function(x){sum(x[2,])}, opinion_dat$documents)
unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
periods
foo
vector(mode="list", length=3)
p
opinion_dat
documents[[foo==1]]
corpus$documents[[foo==1]]
opinion_dat$documents[[foo==1]]
?Filter
bar
bar = list(3,4,5,2,5,6,2)
bar
bar[[3:5]]
bar[3:5]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t()
baz = corpus_seq_t(opinion_dat, periods)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
Map(function(x){sum(x[2,])},
opinion_dat$documents)
Reduce(max, Map(function(x){sum(x[2,])},
opinion_dat$documents))
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
baz = corpus_seq_t(opinion_dat, foo)
class(doc)
class(doc) != "matrix"
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[1]]
docs_by_period[[2]]
Reduce(min, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(ax, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period))
Reduce(min, Map(function(x){length(x)},docs_by_period))
Map(function(x){length(x)},docs_by_period)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
doc
typeof(doc)
class(doc)
class(doc)
class(doc) == "matrix"
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
opinion_dat$documents[[148]]
class(opinion_dat$documents[[148]])
opinion_dat$documents[[148]][1,]
rep(1,0)
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
NULL
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[1]]
docs_by_period[[2]]
docs_by_period[[3]]
docs_by_period[[4]]
unique(periods)
unique(foo)
foo == 1
which(foo == 1)
which(foo == 148)
which(foo == 147)
which(foo == 146)
which(foo == 145)
which(foo == 144)
which(foo == 143)
which(foo == 142)
which(foo == 141)
periods==p
foo==1000
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
p
periods==p
length(corpus$documents)
length(foo)
dim(opinion_dtm)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
periods = period_identity(opinion$date[-opinion_dtm_zero_idx])
periods = period_identity(opinion$date[-opinion_dtm_zero_idx], month)
periods
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[14]]
docs_by_period[[146]]
p
periods
rm(foo)
baz = corpus_seq_t(opinion_dat, periods)
baz
names(baz)
baz$len
baz$corpi
baz$corpi$docs[[1]]
baz$corpi$docs[[2]]
baz$corpi$docs
baz$corpi[[1]]
baz$corpi[[1]]$docs
baz$corpi[[1]]$docs[[1]]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, periods)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
vector(mode="numeric", length=3)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
system('pwd')
setwd("~/Documents/Projects/TopicModel/topicmodel")
Rcpp::sourceCpp('lda_vem.cpp')
library(crude)
library(Rcpp)
library(BH)
library(tm)
data(crudde)
data(crude)
?DocumentTermMatrix
dtm = DocumentTermMatrix(crude, control = list(removePunctuation = TRUE, removeNumbers=TRUE, stopwords = TRUE, stemming=TRUE, tolower=TRUE))
dim(dtm)
source('~/Documents/Projects/TopicModel/topicmodel/lda.R')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
foo$gamma
foo$phi
foo$lambda
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
foo = lda(dtm, 3)
plot(foo$log_liks)
foo$e_log_theta
foo$e_log_beta
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
foo$lambda
foo$gamma
foo$e_log_beta
foo$phi
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
foo$gamma
foo$e_log_theta
compute_e_log_theta(matrix(data=1, nrow=20, ncol=3))
compute_e_log_theta(matrix(data=1, nrow=20, ncol=3), matrix(data=0, nrow=20, ncol=3))
foo = lda(dtm, 3)
foo$e_log_beta
foo$e_log_beta
compute_e_log_beta(matrix(runif(60), nrow=20, ncol=3))
compute_e_log_beta(matrix(runif(60), nrow=20, ncol=3), matrix(data=0, nrow=20, ncol=3))
compute_e_log_beta(matrix(runif(60), nrow=3, ncol=20), matrix(data=0, nrow=3, ncol=20))
runif(60)
compute_e_log_beta(matrix(runif(60), nrow=3, ncol=20), matrix(data=0, nrow=3, ncol=20))
foo$lambda
foo$phi
dtmmat = as.matrix(dtm)
View(dtmmat)
foo = lda(dtm, 3, em_max_iter = 1)
foo$gamma
foo$phi
foo$lambda
foo$e_log_theta
foo$e_log_beta
foo$phi
foo = lda(dtm, 3, em_max_iter = 2)
foo$lambda
foo = lda(dtm, 3, em_max_iter = 3)
foo = lda(dtm, 3, em_max_iter = 2)
foo$lambda
foo = lda(dtm, 3, em_max_iter = 1)
foo$lambda
foo = lda(dtm, 2, em_max_iter = 1)
foo$lambda
foo = lda(dtm, 2, em_max_iter = 2)
foo$lambda
foo = lda(dtm, 2, em_max_iter = 1)
foo$gamma
foo$e_log_beta
foo$e_log_theta
compute_e_log_theta(matrix(data=1, nrow=20, ncol=2), matrix(data=0, nrow=20, ncol=2))
foo$log_liks
compute_e_log_theta(matrix(data=1, nrow=20, ncol=2), matrix(data=0, nrow=20, ncol=2))
compute_e_log_theta(foo$gamma, matrix(data=0, nrow=20, ncol=2))
foo$e_log_theta
foo$gammas
foo$gamma
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 2, em_max_iter = 1)
foo$gamma
foo$e_log_beta
e_log_theta
foo$e_log_theta
foo = lda(dtm, 2, em_max_iter = 2)
foo$e_log_theta
foo$e_log_beta
foo$lambda
foo = lda(dtm, 2, em_max_iter = 1)
phi_update(foo$phi[[1]], foo$e_log_theta, foo$e_log_beta)
phi_updated = phi_update(foo$phi[[1]], foo$e_log_theta, foo$e_log_beta)
gamma_res = gamma_update(rep(1, ncol(foo$gamma)), phi_updated, as.marix(dtm)[1,], .01)
gamma_res = gamma_update(rep(1, ncol(foo$gamma)), phi_updated, as.matrix(dtm)[1,], .01)
gamma_res
foo$lambda
foo$gamma
foo$e_log_beta
foo$e_log_theta
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 2, em_max_iter = 1)
foo = lda(dtm, 2, em_max_iter = 2)
foo = lda(dtm, 2, em_max_iter = 3)
foo$lambda
foo$gamma
foo = lda(dtm, 2, em_max_iter = 1)
foo$gamma
foo$lambda
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 2, em_max_iter = 1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 2, em_max_iter = 1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 2, em_max_iter = 1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 2, em_max_iter = 1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 2, em_max_iter = 1)
foo = lda(dtm[,1:100], 2, em_max_iter = 1)
foo$lambda
foo$phi
foo$lambda
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm[,1:100], 2, em_max_iter = 1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm[,1:100], 2, em_max_iter = 1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm[,1:100], 2, em_max_iter = 1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm[,1:100], 2, em_max_iter = 1)
foo = lda(dtm[,1:100], 2, em_max_iter = 1)
foo$gamma
foo$lambda
foo$phis
foo$phi
data(acq)
dtm_acq = DocumentTermMatrix(acq)
dim(dtm_acq)
foo = lda(dtm, 2, em_max_iter = 1)
foo$lambda
foo$phi
foo$gamma
foo$phi
foo$phi[[1]][1,1]
foo$phi[[2]][1,1]
foo$phi[[3]][1,1]
foo$phi[[4]][1,1]
foo$phi[[5]][1,1]
foo$phi[[6]][1,1]
foo$phi[[7]][1,1]
foo$phi[[8]][1,1]
foo$phi[[9]][1,1]
source('~/Documents/Projects/TopicModel/topicmodel/lda.R')
foo2 = lda(dtm_acq, 2)
foo2$gamma
foo2$phi
foo2$phi
foo = lda(dtm[,1:2], 2, em_max_iter = 1)
foo$lambda
foo$phi
foo$gamma
foo = lda(dtm[,1:3], 2, em_max_iter = 1)
foo$phi
foo$lambda
foo$gamma
foo = lda(dtm, 2, em_max_iter = 1)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 2, em_max_iter = 1)
Rcpp::sourceCpp('lda_vem.cpp')
foo$phi[[1]]
exp(foo$phi[[1]])
rowSum(exp(foo$phi[[1]]))
rowSums(exp(foo$phi[[1]]))
foo = lda(dtm, 2, em_max_iter = 1)
foo$gamma
foo$phi
foo$lambfda
foo$lambda
foo$gamma
foo$phi[[1]]
foo$phi[[2]]
exp(foo$phi[[2]])
rowSums(exp(foo$phi[[2]]))
foo = lda(dtm, 2, em_max_iter = 1, doc_max_iter=1)
foo$lambda
foo$gamma
foo$e_log_theta
foo$e_log_beta
foo = lda(dtm, 2, em_max_iter = 1, doc_max_iter=2)
foo$e_log_beta
foo = lda(dtm, 2, em_max_iter = 1, doc_max_iter=1)
foo$e_log_beta
exp(foo$e_log_beta)
rowSums(exp(foo$e_log_beta))
foo$phi[[1]]
exp(foo$phi[[1]])
rowSums(exp(foo$phi[[1]]))
colSums(exp(foo$phi[[1]]))
foo$phi[[1]]
foo$phi[[1]][1,]
foo$phi[[1]][,1]
exp(foo$phi[[1]][,1])
log(e)
log(exp(1))
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 2)
foo$lambda
foo$gamma
foo$phi[[1]]
foo = lda(dtm, 2, em_max_iter=1)
foo$lambda
foo = lda(dtm, 2, em_max_iter=1, doc_max_iter = 1)
foo$phi[[1]]
exp(foo$phi[[1]])
rowSums(exp(foo$phi[[1]]))
colSums(exp(foo$phi[[1]]))
