help(dailyReturn)
help(quarterlyReturn)
quarterlyReturn(eps, period='quarterly')
quarterlyReturn(as.ts(eps), period='quarterly')
as.ts
ts
quarterlyReturn(
ts(eps), period='quarterly')
2.13+6.52-4.17
4.48/3
1.0149333^3
4.48+2.04
6.52/4
1.0063^4
1.0163^4
.5/.47
(.5/.47)^4
(.5/.47)^3
(.49/.47)^3
(.49/.47)^3
beta1 = c(6.892218322,9.763212333,9.335435189,3.977958995,4.069118812,5.833381533,5.139766384,9.810469437,9.724008133,-0.518822829)
beta1 = c(6.892218322, 9.763212333, 9.335435189,3.977958995,4.069118812,5.833381533,.139766384,9.810469437,9.724008133,-0.518822829)
beta2 = c(11.53618648,          0.013283929,          6.897925742,          -5.4314858,          10.77991125,          12.69894369,          0.868052413,          11.95187264,          10.60233994,          12.11825464)
beta2 = c(11.53618648,0.013283929,6.897925742,-5.4314858,10.77991125,12.69894369,0.868052413,11.95187264,10.60233994,12.11825464)
mean(beta1)
mean(beta2)
std
var(beta1)
sqrt(var(beta1))
sqrt(var(beta1))/sqrt(10)
sqrt(var(beta2))/sqrt(10)
var(beta1)
var(beta2)
help(t.test)
(mean(beta1) - mean(beta2))/sqrt((var(beta1)/10)+(var(beta2)/10))
t.test(beta1,beta2,alternative="less")
t.test(beta1,beta2,alternative="two.sided")
beta1 = c(7.353820576,9.677241377,9.533055819,9.479390315,8.996614501,5.533426885,9.998609112,9.939187792,9.238665901,8.488671714)
beta2 = c(8.896192513,12.08286323,5.503548446,3.468794014,10.32542948,7.375058502,11.87206848,13.45930128,10.48406265,10.24581381)
beta.diff = beta1 - beta2
beta.diff
mean(beta.diff)
var(beta.diff)
t.test(beta.diff, "less")
t.test(x=beta.diff, "less")
t.test(x=beta.diff,y=NULL, "less")
beta1 = c(9.385604099,9.491652995,10.03119475,8.422846187,8.996614501,9.482221245,9.571759304,9.477567641,6.758498457,9.922102963)
beta2 = c(11.46228262,11.17376848,11.76707005,10.02874493,10.32542948,11.49999179,7.492278456,11.76867543,7.126989871,13.06529351)
beta.diff = beta1 - beta2
help(t.test)
t.test(beta.diff,y=NULL,alternative="two.sided")
mean(beta.diff)
variance(beta.diff)
var(beta.diff)
hist(beta.diff)
t.test(beta.diff,y=NULL,alternative="less")
beta.diff = c(-4.263015135,-1.918942076,5.174411704,-2.122912145,-2.389566294,-1.606280552,-1.299332721,-4.866446209,0.092363926,-2.274283635)
t.test(beta.diff,y=NULL,alternative="less")
t.test(beta.diff,y=NULL,alternative="two")
t.test(beta.diff,y=NULL,alternative="two.sided")
t.test(beta.diff,y=NULL,alternative="less")
t.test(beta.diff,y=NULL,alternative="two.sided")
beta1 = c(6.89,9.76,9.34,3.98,4.07,5.83,5.14,9.81,9.72,-0.52)
beta2 = c(11.54,0.01,6.90,-5.43,10.78,12.7,0.87,11.95,10.60,12.12)
t.test(beta1,beta2,alternative="two.sided")
orig = c(.3931,.2803,.4031,.3562,.4419,.4765,.6354,.3197,.3584,.4685)
mine = c(.4501,.2837,.4937,.4051,.5023,.5119,.7401,.3513,.3935,.5332)
t.test(orig-mine)
t.test(mine-orig)
se = sqrt(var(mine-orig)/10)
mean(mine-orig)
mean(mine-orig) + 1.96*se
help(abline)
help(try)
source('~/Documents/Thesis/code/loadPackages.R')
dir()
stat_function(function(x){x*x})
stat_function(fun=function(x){x*x})
print(stat_function(fun=function(x){x*x}))
library(ggplot)
library(ggplot2)
curve(stat_function(fun=function(x){x*x}))
eq = function(x){x*x}
plot(eq,1,1000)
eq = function(x){2x^.8}
eq = function(x){2*x^.8}
plot(eq,1,10)
x1 = rbeta(10000, 91, 11)
x2 = rbeta(10000, 3, 1)
x1 > x2
mean(x1 > x2)
hist(x1-x2)
hist(x1/x2)
source('~/Documents/Thesis/code/volTradeFuncs.R')
source('~/Documents/Thesis/code/volTradeFuncs.R')
sqrt(3)+sqrt(5)
sqrt(8)
2*sqrt(8)
2*sqrt(4)
library("tools", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:tools", unload=TRUE)
install.packages("topicmodels")
library(topicmodels)
LDA
detach("package:graphics", unload=TRUE)
library("graphics", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
digamma
?digamma
rep(100, 5)
beta
betas
gamma
alpha
phi
is.null
?apply
sum(c(TRUE, FALSE, TRUE))
c(1,3,5,0,0,2,0,2,3,0)
test = c(1,3,5,0,0,2,0,2,3,0)
sign(test)
alphas
alpha
log(0)
test <- function(){1}
test()
rm(test)
?Map
test <- function(x,y){x+y}
Map(test, list(1,2,3,4), list(1,2,3,4))
word
c(0,0,0,1,0,1,0,0)
which(c(0,0,0,1,0,1,0,0) > 0)
word
exp(c(1,2,3))
test = matrix(data=c(1,2,3,4), nrow=2, ncol=2)
test
replicate(2,c(1,2))
?replicate
help(replicate)
?apply
apply(test, 1, sum)
apply(test, 1, x/sum(x))
apply(test, 1, function(x){x/sum(x)})
test
apply(test, 2, function(x){x/sum(x)})
apply(test, 1, function(x){x/sum(x)})
sweep(test, 1, rowSums(test), FUN="/")
test
1/rowSums(test)
diag(1/rowSums(test))
test %*% diag(1/rowSums(test))
test
t(test) %*% diag(1/rowSums(test))
t(t(test) %*% diag(1/rowSums(test)))
scale(test, center=FALSE, scale=rowSums(test))
tets
test
wordcloud
library(lubridate)
library(tm)
library(stringr)
source("dataFuncs.R")
library(lubridate)
library(tm)
library(stringr)
source("../dataFuncs.R")
pwd
pwd()
path()
?source
source('~/Documents/Projects/TopicModel/loadData.R', echo=TRUE)
opinion <- readArticles("/Users/patrickding/Documents/Projects/TopicModel/opinion.csv")
opinion[1,]
opinion[2,]
opinion[2,]$italic
opinion[2,]$article
source("/Users/patrickding/Documents/Projects/TopicModel/dataFuncs.R")
opinion <- readArticles("/Users/patrickding/Documents/Projects/TopicModel/opinion.csv")
opinion[1,]
opinion[1,]$italic
opinion[1,]$italic == " "
opinion[1,]$italic == "  "
opinion[1,]$italic == "   "
opinion[1,]$italic == "\et"
opinion[1,]$italic == "\t"
opinion[1000,]$italic == "\t"
opinion[1000,]$italic
opinion[2000,]$italic
opinion[200,]$italic
opinion[2001,]$italic
opinion[3001,]$italic
!%in
3 !%in c(3,4,5)
!(3 %in c(33442))
!(3 %in% c(33442))
3 !%in% c(3,4,5)
3 !(%in% c(3,4,5))
View(opinion)
colnames(opinion)
opinion$kicker
View(opinion$kicker)
cartoon_idx <- str_detect(opinion$kicker, ignore.case("cartoon"))
cartoon_idx
opinion$kicker
cartoon_idx
cartoon_idx[7322]
cartoon_idx[7322]
cartoon_idx[7323]
opinion$kicker[7323]
opinion$kicker
opinion$kicker[1000:2000]
opinion[1461,]
opinion[1462,]
opinion[1460,]
opinion$kicker[2000:3000]
opinion$kicker[3000:4000]
opinion$kicker[4000:5000]
opinion$kicker[5000:6000]
opinion.docs <- transformCorpus(Corpus(VectorSource(opinion$article[!cartoon_idx])))
length(opinion.docs)
opinion.dtm <- DocumentTermMatrix(opinion.docs)
dim(opinion.dtm)
opinion.dtm.count <- rowSums(as.matrix(opinion.dtm))
sum(opinion.dtm.count==0)
opinion.dtm.zero.idx <- which(opinion.dtm.count == 0)
opinion.docs <- Corpus(VectorSource(opinion$article[-opinion.dtm.zero.idx]))
opinion.dtm <- DocumentTermMatrix(transformCorpus(opinion.docs))
period_identity <- function(dates, level) {
# periodIdentity
# Creates vector of period identities, such that documents with same
# level are assigned to the same period
# Requires lubridate
# dates - vector, dates
# level - function, that gets time level from a date. eg, "month"
dates <- dates[order(dates)]
identity <- rep(1, length(dates))
currIdentity <- 1
prevLevel <- level(dates[1])
for (i in 2:length(dates)) {
currLevel <- level(dates[i])
if (currLevel != prevLevel)
currIdentity <- currIdentity + 1
identity[i] <- currIdentity
prevLevel <- currLevel
}
return(identity)
}
period_identity(opinion, "monht")
period_identity(opinion, "month")
period_identity(opinion$date, "month")
level
factor
level
base::level
foo = period_identity(opinion$date, month)
foo
dir()
ls9)
ls()
opinion <- readArticles("/Users/patrickding/Documents/Projects/TopicModel/opinion.csv")
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
rm(opinion.docs)
rm(opinion.dtm)
opinion_dtm <- DocumentTermMatrix(opinion_docs)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
opinion_docs <- Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx]))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
dim(opinion_dtm)
opinion_docs <- Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx,]))
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx])))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
dim(opinion_dtm)
period
periods
document
doc
opinion_dtm[1,]
typeof(opinion_dtm[1,])
is.object(opinion_dtm[1,])
isS4(opinion_dtm[1,])
class(opinion_dtm[1,])
class(opinion_dtm[1,]) == "DocumentTermMatrix"
if(class(opinion_dtm[1,]) == "DocumentTermMatrix")
print(hi)
library(topicmodels)
?dtm2ldaformat
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
opinion_dat = dtm2ldaformat(opinion_dtm)
dim(opinion_dat[1])
dim(opinion_dat[[1])
dim(opinion_dat[[1]])
dim(opinion_dat[[2]])
opinion_dat[[1]]
length(opinion_dat[[1]])
opinion_dat[[1]][1]
library(lda)
?lexicalize
opinion_dat$vocav
opinion_dat$vocab
opinion_dat$vocab[1]
opinion_dat$vocab[2]
opinion_dat$vocab[3]
opinion_dat$vocab[4]
opinion_dat$vocab[5]
opinion_dat$vocab[6]
opinion_dat$vocab[7]
opinion_dat$vocab[10]
opinion_dat$vocab[100]
opinion_dat$vocab[120]
opinion_dat$vocab[130]
opinion_dat$documents[[2]][1]
opinion_dat$documents[[1]]
opinion_dat$documents[[2]]
class(opinion_dat)
class("DocumentTermMatrix")
typeof(opinion_dat$documents[[1]])
class(opinion_dat$documents[[1]])
class(opinion_dat$documents)
?Map
length(opinion_dat$vocab)
dim(opinion_dtm)
union(opinion_dat$documents[1,])
union(Map(function(x){x[1,]}, opinion_dat$documents))
union(Map(function(x){x}, opinion_dat$documents))
?"union"
opinion_dat$documents[[1]][1,]
opinion_dat$documents[[1]][1000,]
opinion_dat$documents[[1000]][1,]
opinion_dat$documents[[6000]][1,]
union
Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents))
length(Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents)))
class(opinion_dat)
docs$documents
corpus
length(opinion_dat$documents)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents)
)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
Map(function(x){sum(x[2,])}, opinion_dat$documents)
unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
periods
foo
vector(mode="list", length=3)
p
opinion_dat
documents[[foo==1]]
corpus$documents[[foo==1]]
opinion_dat$documents[[foo==1]]
?Filter
bar
bar = list(3,4,5,2,5,6,2)
bar
bar[[3:5]]
bar[3:5]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t()
baz = corpus_seq_t(opinion_dat, periods)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
Map(function(x){sum(x[2,])},
opinion_dat$documents)
Reduce(max, Map(function(x){sum(x[2,])},
opinion_dat$documents))
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
baz = corpus_seq_t(opinion_dat, foo)
class(doc)
class(doc) != "matrix"
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[1]]
docs_by_period[[2]]
Reduce(min, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(ax, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period))
Reduce(min, Map(function(x){length(x)},docs_by_period))
Map(function(x){length(x)},docs_by_period)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
doc
typeof(doc)
class(doc)
class(doc)
class(doc) == "matrix"
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
opinion_dat$documents[[148]]
class(opinion_dat$documents[[148]])
opinion_dat$documents[[148]][1,]
rep(1,0)
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
NULL
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[1]]
docs_by_period[[2]]
docs_by_period[[3]]
docs_by_period[[4]]
unique(periods)
unique(foo)
foo == 1
which(foo == 1)
which(foo == 148)
which(foo == 147)
which(foo == 146)
which(foo == 145)
which(foo == 144)
which(foo == 143)
which(foo == 142)
which(foo == 141)
periods==p
foo==1000
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
p
periods==p
length(corpus$documents)
length(foo)
dim(opinion_dtm)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
periods = period_identity(opinion$date[-opinion_dtm_zero_idx])
periods = period_identity(opinion$date[-opinion_dtm_zero_idx], month)
periods
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[14]]
docs_by_period[[146]]
p
periods
rm(foo)
baz = corpus_seq_t(opinion_dat, periods)
baz
names(baz)
baz$len
baz$corpi
baz$corpi$docs[[1]]
baz$corpi$docs[[2]]
baz$corpi$docs
baz$corpi[[1]]
baz$corpi[[1]]$docs
baz$corpi[[1]]$docs[[1]]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, periods)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
vector(mode="numeric", length=3)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
system('pwd')
setwd("~/Documents/Projects/TopicModel/topicmodel")
library(tm)
library(topicmodels)
topics
data(AssociatedPress)
dim(AssociatedPress)
50 %% 2
50 %% 3
Rcpp::sourceCpp('lda_vem.cpp')
source('~/Documents/Projects/TopicModel/topicmodel/lda.R')
ap_lda <- lda(AssociatedPress, 10)
ap_lda$log_liks
plot(ap_lda$log_liks)
source('~/Documents/Projects/TopicModel/topicmodel/topic_stats.R')
get_topics(ap_lda, 10)
get_topics(ap_lda, 20)
