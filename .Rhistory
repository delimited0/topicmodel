base::level
foo = period_identity(opinion$date, month)
foo
dir()
ls9)
ls()
opinion <- readArticles("/Users/patrickding/Documents/Projects/TopicModel/opinion.csv")
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
rm(opinion.docs)
rm(opinion.dtm)
opinion_dtm <- DocumentTermMatrix(opinion_docs)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
opinion_docs <- Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx]))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
dim(opinion_dtm)
opinion_docs <- Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx,]))
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article[-opinion_dtm_zero_idx])))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
dim(opinion_dtm)
period
periods
document
doc
opinion_dtm[1,]
typeof(opinion_dtm[1,])
is.object(opinion_dtm[1,])
isS4(opinion_dtm[1,])
class(opinion_dtm[1,])
class(opinion_dtm[1,]) == "DocumentTermMatrix"
if(class(opinion_dtm[1,]) == "DocumentTermMatrix")
print(hi)
library(topicmodels)
?dtm2ldaformat
opinion_docs <- transformCorpus(Corpus(VectorSource(opinion$article)))
opinion_dtm <- DocumentTermMatrix(opinion_docs)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
opinion_dat = dtm2ldaformat(opinion_dtm)
dim(opinion_dat[1])
dim(opinion_dat[[1])
dim(opinion_dat[[1]])
dim(opinion_dat[[2]])
opinion_dat[[1]]
length(opinion_dat[[1]])
opinion_dat[[1]][1]
library(lda)
?lexicalize
opinion_dat$vocav
opinion_dat$vocab
opinion_dat$vocab[1]
opinion_dat$vocab[2]
opinion_dat$vocab[3]
opinion_dat$vocab[4]
opinion_dat$vocab[5]
opinion_dat$vocab[6]
opinion_dat$vocab[7]
opinion_dat$vocab[10]
opinion_dat$vocab[100]
opinion_dat$vocab[120]
opinion_dat$vocab[130]
opinion_dat$documents[[2]][1]
opinion_dat$documents[[1]]
opinion_dat$documents[[2]]
class(opinion_dat)
class("DocumentTermMatrix")
typeof(opinion_dat$documents[[1]])
class(opinion_dat$documents[[1]])
class(opinion_dat$documents)
?Map
length(opinion_dat$vocab)
dim(opinion_dtm)
union(opinion_dat$documents[1,])
union(Map(function(x){x[1,]}, opinion_dat$documents))
union(Map(function(x){x}, opinion_dat$documents))
?"union"
opinion_dat$documents[[1]][1,]
opinion_dat$documents[[1]][1000,]
opinion_dat$documents[[1000]][1,]
opinion_dat$documents[[6000]][1,]
union
Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents))
length(Reduce(union, Map(function(x){x[1,]}, opinion_dat$documents)))
class(opinion_dat)
docs$documents
corpus
length(opinion_dat$documents)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents)
)
max(Map(function(x){sum(x[2,])}, opinion_dat$documents))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
Map(function(x){sum(x[2,])}, opinion_dat$documents)
unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
Reduce(max, Map(function(x){sum(x[2,])}, opinion_dat$documents))
max(unlist(Map(function(x){sum(x[2,])}, opinion_dat$documents)))
periods
foo
vector(mode="list", length=3)
p
opinion_dat
documents[[foo==1]]
corpus$documents[[foo==1]]
opinion_dat$documents[[foo==1]]
?Filter
bar
bar = list(3,4,5,2,5,6,2)
bar
bar[[3:5]]
bar[3:5]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t()
baz = corpus_seq_t(opinion_dat, periods)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
Map(function(x){sum(x[2,])},
opinion_dat$documents)
Reduce(max, Map(function(x){sum(x[2,])},
opinion_dat$documents))
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
baz = corpus_seq_t(opinion_dat, foo)
class(doc)
class(doc) != "matrix"
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[1]]
docs_by_period[[2]]
Reduce(min, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(ax, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period[[2]]))
Reduce(max, Map(function(x){length(x)},docs_by_period))
Reduce(min, Map(function(x){length(x)},docs_by_period))
Map(function(x){length(x)},docs_by_period)
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
doc
typeof(doc)
class(doc)
class(doc)
class(doc) == "matrix"
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
opinion_dat$documents[[148]]
class(opinion_dat$documents[[148]])
opinion_dat$documents[[148]][1,]
rep(1,0)
source('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
NULL
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[1]]
docs_by_period[[2]]
docs_by_period[[3]]
docs_by_period[[4]]
unique(periods)
unique(foo)
foo == 1
which(foo == 1)
which(foo == 148)
which(foo == 147)
which(foo == 146)
which(foo == 145)
which(foo == 144)
which(foo == 143)
which(foo == 142)
which(foo == 141)
periods==p
foo==1000
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
p
periods==p
length(corpus$documents)
length(foo)
dim(opinion_dtm)
opinion_dtm_count <- rowSums(as.matrix(opinion_dtm))
opinion_dtm_zero_idx <- which(opinion_dtm_count == 0)
periods = period_identity(opinion$date[-opinion_dtm_zero_idx])
periods = period_identity(opinion$date[-opinion_dtm_zero_idx], month)
periods
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
debugSource('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, foo)
docs_by_period
docs_by_period[[148]]
docs_by_period[[147]]
docs_by_period[[14]]
docs_by_period[[146]]
p
periods
rm(foo)
baz = corpus_seq_t(opinion_dat, periods)
baz
names(baz)
baz$len
baz$corpi
baz$corpi$docs[[1]]
baz$corpi$docs[[2]]
baz$corpi$docs
baz$corpi[[1]]
baz$corpi[[1]]$docs
baz$corpi[[1]]$docs[[1]]
source('~/Documents/Projects/TopicModel/dtm/data.R')
baz = corpus_seq_t(opinion_dat, periods)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
vector(mode="numeric", length=3)
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
source('~/Documents/Projects/TopicModel/dtm/data.R')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
Rcpp::sourceCpp('Documents/Projects/TopicModel/dtm/lda.cpp')
system('pwd')
setwd("~/Documents/Projects/TopicModel/topicmodel")
Rcpp::sourceCpp('lda_vem.cpp')
gamma_update(c(1,2), matrix(data=c(.3,.7, .6, .4), nrow=2, byrow=TRUE), c(0,1), .01)
gamma_row = c(1,2)
gamma_update(gamma_row, matrix(data=c(.3,.7, .6, .4), nrow=2, byrow=TRUE), c(0,1), .01)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
library("BH", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("Rcpp", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
gamma_update(gamma_row, matrix(data=c(.3,.7, .6, .4), nrow=2, byrow=TRUE), c(0,1), .01)
foo = gamma_update(gamma_row, matrix(data=c(.3,.7, .6, .4), nrow=2, byrow=TRUE), c(0,1), .01)
Rcpp::sourceCpp('lda_vem.cpp')
foo = gamma_update(gamma_row, matrix(data=c(.3,.7, .6, .4), nrow=2, byrow=TRUE), c(0,1), .01)
foo["avg_gamma_change"]
foo = gamma_update(gamma_row, matrix(data=c(.2,.7, .6, .4), nrow=2, byrow=TRUE), c(0,1), .01)
foo["avg_gamma_change"]
foo$avg_gamma_change
foo = gamma_update(gamma_row, matrix(data=c(.2,0, .6, .4), nrow=2, byrow=TRUE), c(0,1), .01)
foo$avg_gamma_change
source('~/Documents/Projects/TopicModel/topicmodel/lda.R')
library(tm)
data(crude)
dtm = DocumentTermMatrix(crude)
foo = lda(dtm, 3, doc_max_iter = 10)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3, doc_max_iter = 10)
foo = lda(dtm, 3)
foo$gamma
foo$lambda
foo$phi
foo = lda(dtm, 3, alpha=1, eta=1, doc_max_iter = 10)
foo = lda(dtm, 3, alpha=1, eta=1)
foo$lambda
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3, alpha=1, eta=1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3, alpha=1, eta=1)
foo$log_liks
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3, alpha=1, eta=1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3, alpha=1, eta=1)
foo = lda(dtm, 3, alpha=1, eta=1, em_tol = 1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3, alpha=1, eta=1, em_tol = 100)
foo = lda(dtm, 3, alpha=1, eta=1, em_tol = 10000)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3, alpha=1, eta=1, em_tol = 10000)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3, alpha=1, eta=1, em_tol = 10000)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3, alpha=1, eta=1, em_tol = 10000)
foo$lambda
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3, alpha=1, eta=1, em_tol = 10000)
foo$phi
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3, alpha=1, eta=1, em_tol = 10000)
foo = lda(dtm, 3, alpha=1, eta=1)
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
inspect(crude[[1]])
inspect(crude[1[])
inspect(crude[1])
dtm[1,]
inspect(dtm[1,])
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
log(.011)
log(NaN)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
log(e)
log(exp(1))
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
foo$phi
foo$gamma
which(isnan(foo$gamma))
which(is.nan(foo$gamma))
foo$lambda
which(is.nan(foo$lambda))
baz = Map(is.nan, foo$phi)
baz
baz[[1]]
baz[[1]] == 0
baz
which(baz[[1]] == 0)
which(baz[[1]] == TRUE)
which(baz[[2]] == TRUE)
foo$phi
baz = Map(function(x){x==0}, foo$phi)
baz
baz = Map(function(x){sum(which(x==0))}, foo$phi)
baz
foo$phi[[20]][15612]
foo$phi[[20]][15611]
foo$phi[[20]]
which(foo$phi[[20]]==0)
which(is.nan(log(foo$phi[[20]])))
which(is.nan(log(foo$phi[[19]])))
which(is.nan(log(foo$phi[[18])))
which(is.nan(log(foo$phi[[18]])))
which(is.nan(log(foo$phi[[17]])))
which(is.nan(log(foo$phi[[16]])))
which(is.nan(log(foo$phi[[15]])))
which(is.nan(log(foo$phi[[14]])))
which(is.nan(log(foo$phi[[13]])))
which(is.nan(log(foo$phi[[12]])))
max
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
digamma(1)
digamma(1) *3
digamma(1) *3 - digamma(1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
foo = lda(dtm, 3)
exp(-12000)
exp(-12000) == 0
exp(-12) == 0
plot(digamma)
digamma(2)
digamma(100)
digamma(1000)
digamma(.1)
runif(3)
digamma(sum(runif(1000)))
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
digamma(0)
Rcpp::sourceCpp('lda_vem.cpp')
log(1)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
dim(dtm)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
lambda
lambda = matrix(data=runif(30), nrow=3, ncol=10)
lambda
e_log_beta = matrix(data=0, nrow=3, ncol=10)
res
res = compute_e_log_beta(lambda, e_log_beta)
res
exp(res)
lambda
foo = lda(dtm, 3)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
digamma(0)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 3)
test
Rcpp::sourceCpp('lda_vem.cpp')
test
test(3)
digamma(3)
test(0)
test(-1)
test(-.1)
test(-.2)
test(-.9)
test(-2)
test(-2.1)
test(0)
test(-0)
test(-.01)
foo = lda(dtm, 4)
foo = lda(dtm, 5)
foo = lda(dtm, 10)
test(NaN)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 10)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 10)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 10)
dim(dtm)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 10)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 10)
Rcpp::sourceCpp('lda_vem.cpp')
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 10)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 10)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 10)
Rcpp::sourceCpp('lda_vem.cpp')
foo = lda(dtm, 10)
foo$e_log_beta
min(foo$e_log_beta)
foo$lambda
max(foo$lambda)
digamma(max(foo$lambda))
dim(foo$lambda)
lamda_rs = rowSums(foo$lambda)
lamda_rs
digamma(lambda_rs)
digamma(lamda_rs)
